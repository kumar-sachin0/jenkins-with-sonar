pipeline {
  agent {
    docker {
      image 'herosk/custom-maven:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock -e DOCKER_HOST=tcp://100.29.187.52:8080'
    }
  }

  environment {
    DOCKER_HOST = "tcp://100.29.187.52:8080"
  }

  stages {
    stage('Verify Docker Setup') {
      steps {
        sh '''
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker is NOT installed! Exiting..."
            exit 1
          fi

          # Ensure Docker daemon is running
          sudo systemctl start docker || echo "Docker service not found!"

          # Test Docker access
          docker ps || { echo "Docker command failed!"; exit 1; }

          echo "Docker setup is verified and running."
        '''
      }
    }

    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "herosk/custom-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            # Navigate to app directory
            cd spring-boot-app

            # Verify Dockerfile existence
            if [ ! -f "Dockerfile" ]; then
              echo "Dockerfile missing! Exiting..."
              exit 1
            fi

            # Build Docker image with logging
            docker build -t ${DOCKER_IMAGE} . || { echo "Docker Build Failed"; exit 1; }

            # Confirm image exists before pushing
            docker images | grep "${DOCKER_IMAGE}" || { echo "Image not found!"; exit 1; }

            echo "Build successful, proceeding to push..."
          '''

          def dockerImage = docker.image("${DOCKER_IMAGE}")

          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            try {
              dockerImage.push()
              echo "Docker Image Pushed Successfully"
            } catch (Exception e) {
              error("Docker image push failed: ${e}")
            }
          }
        }
      }
    }
  }
}
