pipeline {
  agent none // No global agent, each stage gets its own Docker agent

  stages {
    stage('Checkout') {
      agent {
        docker {
          image 'herosk/custom-maven:v1'
          args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/kumar-sachin0/jenkins-with-sonar.git'
      }
    }

    stage('Build and Test') {
      agent {
        docker {
          image 'herosk/custom-maven:v1'
          args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package' // Build project & create JAR
      }
    }

    stage('Static Code Analysis') {
      agent {
        docker {
          image 'herosk/custom-maven:v1'
          args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      environment {
        SONAR_URL = "http://3.222.188.206:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      agent {
        docker {
          image 'docker:latest' // Use Docker image for build & push
          args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      environment {
        DOCKER_IMAGE = "herosk/custom-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-with-sonar"
            GIT_USER_NAME = "kumar-sachin0"
        }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "sachinkumar002000@gmail.com"
            git config user.name "kumar-sachin0"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
