pipeline {
  agent {
    docker {
      image 'herosk/custom-maven:v1'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/kumar-sachin0/jenkins-with-sonar.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://100.29.187.52:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
   stage('Build and Push Docker Image') {
    environment {
        DOCKER_IMAGE = "herosk/custom-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }
    steps {
        script {
            sh '''
                # Check if Docker is installed
                if ! command -v docker &> /dev/null; then
                    echo "Docker is not installed!"
                    exit 1
                fi

                # Ensure the correct directory exists
                if [ ! -d "spring-boot-app" ]; then
                  echo "Directory spring-boot-app not found!"
                  exit 1
                fi

                cd spring-boot-app
                ls -l Dockerfile

                # Build Docker image and capture the status
                docker build -t ${DOCKER_IMAGE} . || { echo "Docker Build Failed"; exit 1; }

                # Verify that the image exists before pushing
                docker images | grep "${DOCKER_IMAGE}" || { echo "Image not found after build"; exit 1; }

                echo "Build successful, proceeding to push..."
            '''

            def dockerImage = docker.image("${DOCKER_IMAGE}")

            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                try {
                    dockerImage.push()
                    echo "Docker Image Pushed Successfully"
                } catch (Exception e) {
                    error("Docker image push failed: ${e}")
                }
            }
        }
    }
}


    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "jenkins-with-sonar"
            GIT_USER_NAME = "kumar-sachin0"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "sachinkumar002000@gmail.com"
                    git config user.name "kumar-sachin0"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
